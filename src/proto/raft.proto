package anraft;

option cc_generic_services = true;

//refer to paper of raft: 

message VoteRequest {
	optional int64 term = 1;		
	optional string candidate_id = 2;
	optional int64 last_log_index = 3;
	optional int64 last_log_term = 4;	
}

message VoteResponse {
	optional int64 term = 1;
	optional bool vote_granted = 2;
}

message LogEntry {
	optional int64 term = 1;
	optional int64 index = 2;
	optional bytes data = 3;
	//TODO
}

message AppendEntriesRequest {
	optional int64 term = 1;		
	optional string leader_id = 2;
	optional int64 prev_log_index = 3;
	optional int64 prev_log_term = 4;
	repeated LogEntry entries = 5;
	optional int64 leader_commit = 6;	
}

message AppendEntriesResponse {
	optional int64 term = 1;
	optional bool success = 2;
}

service RaftNode {
	rpc Vote(VoteRequest) returns(VoteResponse);
	rpc AppendEntries(AppendEntriesRequest) returns(AppendEntriesResponse);
}