package anraft;

option cc_generic_services = true;

//refer to paper of raft: 

enum RaftError {
    ErrNone          = 0;
    ErrCompacted     = 1;
	ErrSnapOutOfDate = 2;
	ErrUnavailable   = 3;
	ErrSnapshotTemporarilyUnavailable = 4;
}


message HardState {
	optional uint64 term   = 1;
	optional uint64 vote   = 2;
	optional uint64 commit = 3;
}

message ConfState {
	repeated uint64 nodes    = 1;
	repeated uint64 learners = 2;
}

enum Role {
    kFollower = 0;
    kCandidate = 1;
    kLeader = 2;
}

message VoteRequest {
	optional int64 term = 1;		
	optional string candidate_id = 2;
	optional int64 last_log_index = 3;
	optional int64 last_log_term = 4;	
}

message VoteResponse {
	optional int64 term = 1;
	optional bool vote_granted = 2;
}

enum EntryType {
	EntryNormal     = 0;
	EntryConfChange = 1;
}

message LogEntry {
	optional int64 term       = 1;
	optional int64 index      = 2;
	optional bytes data       = 3;
	optional EntryType type   = 4;
}

message SnapshotMetadata {
	optional ConfState conf_state = 1;
	optional uint64    index      = 2;
	optional uint64    term       = 3;
}

message Snapshot {
	optional bytes            data     = 1;
	optional SnapshotMetadata metadata = 2;
}

message AppendEntriesRequest {
	optional int64 term = 1;		
	optional string leader_id = 2;
	optional int64 prev_log_index = 3;
	optional int64 prev_log_term = 4;
	repeated LogEntry entries = 5;
	optional int64 leader_commit = 6;	
}

message AppendEntriesResponse {
	optional int64 term = 1;
	optional bool success = 2;
}

service RaftNode {
	rpc Vote(VoteRequest) returns(VoteResponse);
	rpc AppendEntries(AppendEntriesRequest) returns(AppendEntriesResponse);
}