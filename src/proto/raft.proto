syntax = "proto2";
package anraft;

option cc_generic_services = true;

//refer to paper of raft: 

enum RaftError {
    ErrNone          = 0;
    ErrCompacted     = 1;
	ErrSnapOutOfDate = 2;
	ErrUnavailable   = 3;
	ErrSnapshotTemporarilyUnavailable = 4;
}


message HardState {
	optional uint64 term   = 1;
	optional uint64 vote   = 2;
	optional uint64 commit = 3;
}

message ConfState {
	repeated uint64 nodes    = 1;
	repeated uint64 learners = 2;
}


enum ConfChangeType {
	ConfChangeAddNode        = 0;
	ConfChangeRemoveNode     = 1;
	ConfChangeUpdateNode     = 2;
	ConfChangeAddLearnerNode = 3;
}

message ConfChange {
	optional uint64          ID      = 1;
	optional ConfChangeType  Type    = 2;
	optional uint64          NodeID  = 3;
	optional bytes           Context = 4;
}

enum EntryType {
	EntryNormal     = 0;
	EntryConfChange = 1;
}

message LogEntry {
	optional int64 term       = 1;
	optional int64 index      = 2;
	optional bytes data       = 3;
	optional EntryType type   = 4;
}

message SnapshotMetadata {
	optional ConfState conf_state = 1;
	optional uint64    index      = 2;
	optional uint64    term       = 3;
}

message Snapshot {
	optional bytes            data     = 1;
	optional SnapshotMetadata metadata = 2;
}

enum MessageType {
	MsgHup             = 0;
	MsgBeat            = 1;
	MsgProp            = 2;
	MsgApp             = 3;
	MsgAppResp         = 4;
	MsgVote            = 5;
	MsgVoteResp        = 6;
	MsgSnap            = 7;
	MsgHeartbeat       = 8;
	MsgHeartbeatResp   = 9;
	MsgUnreachable     = 10;
	MsgSnapStatus      = 11;
	MsgCheckQuorum     = 12;
	MsgTransferLeader  = 13;
	MsgTimeoutNow      = 14;
	MsgReadIndex       = 15;
	MsgReadIndexResp   = 16;
	MsgPreVote         = 17;
	MsgPreVoteResp     = 18;
}

message Message {
	optional MessageType type        = 1;
	optional uint64      to          = 2;
	optional uint64      from        = 3;
	optional uint64      term        = 4;
	optional uint64      logTerm     = 5;
	optional uint64      index       = 6;
	repeated LogEntry    entries     = 7;
	optional uint64      commit      = 8;
	optional Snapshot    snapshot    = 9;
	optional bool        reject      = 10;
	optional uint64      rejectHint  = 11;
	optional bytes       context     = 12;
}


enum Role {
    kFollower = 0;
    kCandidate = 1;
    kLeader = 2;
}

message VoteRequest {
	optional int64 term = 1;		
	optional string candidate_id = 2;
	optional int64 last_log_index = 3;
	optional int64 last_log_term = 4;	
}

message VoteResponse {
	optional int64 term = 1;
	optional bool vote_granted = 2;
}



message AppendEntriesRequest {
	optional int64 term = 1;		
	optional string leader_id = 2;
	optional int64 prev_log_index = 3;
	optional int64 prev_log_term = 4;
	repeated LogEntry entries = 5;
	optional int64 leader_commit = 6;	
}

message AppendEntriesResponse {
	optional int64 term = 1;
	optional bool success = 2;
}

service RaftNode {
	rpc Vote(VoteRequest) returns(VoteResponse);
	rpc AppendEntries(AppendEntriesRequest) returns(AppendEntriesResponse);
}
