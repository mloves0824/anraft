// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef PROTOBUF_raft_2eproto__INCLUDED
#define PROTOBUF_raft_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace anraft {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_raft_2eproto();
void protobuf_AssignDesc_raft_2eproto();
void protobuf_ShutdownFile_raft_2eproto();

class VoteRequest;
class VoteResponse;
class LogEntry;
class AppendEntriesRequest;
class AppendEntriesResponse;

// ===================================================================

class VoteRequest : public ::google::protobuf::Message {
 public:
  VoteRequest();
  virtual ~VoteRequest();

  VoteRequest(const VoteRequest& from);

  inline VoteRequest& operator=(const VoteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteRequest& default_instance();

  void Swap(VoteRequest* other);

  // implements Message ----------------------------------------------

  VoteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteRequest& from);
  void MergeFrom(const VoteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);

  // optional string candidate_id = 2;
  inline bool has_candidate_id() const;
  inline void clear_candidate_id();
  static const int kCandidateIdFieldNumber = 2;
  inline const ::std::string& candidate_id() const;
  inline void set_candidate_id(const ::std::string& value);
  inline void set_candidate_id(const char* value);
  inline void set_candidate_id(const char* value, size_t size);
  inline ::std::string* mutable_candidate_id();
  inline ::std::string* release_candidate_id();
  inline void set_allocated_candidate_id(::std::string* candidate_id);

  // optional int64 last_log_index = 3;
  inline bool has_last_log_index() const;
  inline void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 3;
  inline ::google::protobuf::int64 last_log_index() const;
  inline void set_last_log_index(::google::protobuf::int64 value);

  // optional int64 last_log_term = 4;
  inline bool has_last_log_term() const;
  inline void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 4;
  inline ::google::protobuf::int64 last_log_term() const;
  inline void set_last_log_term(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:anraft.VoteRequest)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_candidate_id();
  inline void clear_has_candidate_id();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();
  inline void set_has_last_log_term();
  inline void clear_has_last_log_term();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 term_;
  ::std::string* candidate_id_;
  ::google::protobuf::int64 last_log_index_;
  ::google::protobuf::int64 last_log_term_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static VoteRequest* default_instance_;
};
// -------------------------------------------------------------------

class VoteResponse : public ::google::protobuf::Message {
 public:
  VoteResponse();
  virtual ~VoteResponse();

  VoteResponse(const VoteResponse& from);

  inline VoteResponse& operator=(const VoteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteResponse& default_instance();

  void Swap(VoteResponse* other);

  // implements Message ----------------------------------------------

  VoteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteResponse& from);
  void MergeFrom(const VoteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);

  // optional bool vote_granted = 2;
  inline bool has_vote_granted() const;
  inline void clear_vote_granted();
  static const int kVoteGrantedFieldNumber = 2;
  inline bool vote_granted() const;
  inline void set_vote_granted(bool value);

  // @@protoc_insertion_point(class_scope:anraft.VoteResponse)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_vote_granted();
  inline void clear_has_vote_granted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 term_;
  bool vote_granted_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static VoteResponse* default_instance_;
};
// -------------------------------------------------------------------

class LogEntry : public ::google::protobuf::Message {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEntry& default_instance();

  void Swap(LogEntry* other);

  // implements Message ----------------------------------------------

  LogEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);

  // optional int64 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int64 index() const;
  inline void set_index(::google::protobuf::int64 value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:anraft.LogEntry)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 index_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static LogEntry* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntriesRequest : public ::google::protobuf::Message {
 public:
  AppendEntriesRequest();
  virtual ~AppendEntriesRequest();

  AppendEntriesRequest(const AppendEntriesRequest& from);

  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesRequest& default_instance();

  void Swap(AppendEntriesRequest* other);

  // implements Message ----------------------------------------------

  AppendEntriesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntriesRequest& from);
  void MergeFrom(const AppendEntriesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);

  // optional string leader_id = 2;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  inline const ::std::string& leader_id() const;
  inline void set_leader_id(const ::std::string& value);
  inline void set_leader_id(const char* value);
  inline void set_leader_id(const char* value, size_t size);
  inline ::std::string* mutable_leader_id();
  inline ::std::string* release_leader_id();
  inline void set_allocated_leader_id(::std::string* leader_id);

  // optional int64 prev_log_index = 3;
  inline bool has_prev_log_index() const;
  inline void clear_prev_log_index();
  static const int kPrevLogIndexFieldNumber = 3;
  inline ::google::protobuf::int64 prev_log_index() const;
  inline void set_prev_log_index(::google::protobuf::int64 value);

  // optional int64 prev_log_term = 4;
  inline bool has_prev_log_term() const;
  inline void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 4;
  inline ::google::protobuf::int64 prev_log_term() const;
  inline void set_prev_log_term(::google::protobuf::int64 value);

  // repeated .anraft.LogEntry entries = 5;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 5;
  inline const ::anraft::LogEntry& entries(int index) const;
  inline ::anraft::LogEntry* mutable_entries(int index);
  inline ::anraft::LogEntry* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::anraft::LogEntry >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::anraft::LogEntry >*
      mutable_entries();

  // optional int64 leader_commit = 6;
  inline bool has_leader_commit() const;
  inline void clear_leader_commit();
  static const int kLeaderCommitFieldNumber = 6;
  inline ::google::protobuf::int64 leader_commit() const;
  inline void set_leader_commit(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:anraft.AppendEntriesRequest)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_prev_log_index();
  inline void clear_has_prev_log_index();
  inline void set_has_prev_log_term();
  inline void clear_has_prev_log_term();
  inline void set_has_leader_commit();
  inline void clear_has_leader_commit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 term_;
  ::std::string* leader_id_;
  ::google::protobuf::int64 prev_log_index_;
  ::google::protobuf::int64 prev_log_term_;
  ::google::protobuf::RepeatedPtrField< ::anraft::LogEntry > entries_;
  ::google::protobuf::int64 leader_commit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static AppendEntriesRequest* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntriesResponse : public ::google::protobuf::Message {
 public:
  AppendEntriesResponse();
  virtual ~AppendEntriesResponse();

  AppendEntriesResponse(const AppendEntriesResponse& from);

  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesResponse& default_instance();

  void Swap(AppendEntriesResponse* other);

  // implements Message ----------------------------------------------

  AppendEntriesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntriesResponse& from);
  void MergeFrom(const AppendEntriesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);

  // optional bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:anraft.AppendEntriesResponse)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 term_;
  bool success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static AppendEntriesResponse* default_instance_;
};
// ===================================================================

class RaftNode_Stub;

class RaftNode : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RaftNode() {};
 public:
  virtual ~RaftNode();

  typedef RaftNode_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Vote(::google::protobuf::RpcController* controller,
                       const ::anraft::VoteRequest* request,
                       ::anraft::VoteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AppendEntries(::google::protobuf::RpcController* controller,
                       const ::anraft::AppendEntriesRequest* request,
                       ::anraft::AppendEntriesResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftNode);
};

class RaftNode_Stub : public RaftNode {
 public:
  RaftNode_Stub(::google::protobuf::RpcChannel* channel);
  RaftNode_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~RaftNode_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements RaftNode ------------------------------------------

  void Vote(::google::protobuf::RpcController* controller,
                       const ::anraft::VoteRequest* request,
                       ::anraft::VoteResponse* response,
                       ::google::protobuf::Closure* done);
  void AppendEntries(::google::protobuf::RpcController* controller,
                       const ::anraft::AppendEntriesRequest* request,
                       ::anraft::AppendEntriesResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftNode_Stub);
};


// ===================================================================


// ===================================================================

// VoteRequest

// optional int64 term = 1;
inline bool VoteRequest::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoteRequest::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoteRequest::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoteRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 VoteRequest::term() const {
  return term_;
}
inline void VoteRequest::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// optional string candidate_id = 2;
inline bool VoteRequest::has_candidate_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoteRequest::set_has_candidate_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoteRequest::clear_has_candidate_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoteRequest::clear_candidate_id() {
  if (candidate_id_ != &::google::protobuf::internal::kEmptyString) {
    candidate_id_->clear();
  }
  clear_has_candidate_id();
}
inline const ::std::string& VoteRequest::candidate_id() const {
  return *candidate_id_;
}
inline void VoteRequest::set_candidate_id(const ::std::string& value) {
  set_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::kEmptyString) {
    candidate_id_ = new ::std::string;
  }
  candidate_id_->assign(value);
}
inline void VoteRequest::set_candidate_id(const char* value) {
  set_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::kEmptyString) {
    candidate_id_ = new ::std::string;
  }
  candidate_id_->assign(value);
}
inline void VoteRequest::set_candidate_id(const char* value, size_t size) {
  set_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::kEmptyString) {
    candidate_id_ = new ::std::string;
  }
  candidate_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VoteRequest::mutable_candidate_id() {
  set_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::kEmptyString) {
    candidate_id_ = new ::std::string;
  }
  return candidate_id_;
}
inline ::std::string* VoteRequest::release_candidate_id() {
  clear_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = candidate_id_;
    candidate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VoteRequest::set_allocated_candidate_id(::std::string* candidate_id) {
  if (candidate_id_ != &::google::protobuf::internal::kEmptyString) {
    delete candidate_id_;
  }
  if (candidate_id) {
    set_has_candidate_id();
    candidate_id_ = candidate_id;
  } else {
    clear_has_candidate_id();
    candidate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 last_log_index = 3;
inline bool VoteRequest::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoteRequest::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoteRequest::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoteRequest::clear_last_log_index() {
  last_log_index_ = GOOGLE_LONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::int64 VoteRequest::last_log_index() const {
  return last_log_index_;
}
inline void VoteRequest::set_last_log_index(::google::protobuf::int64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
}

// optional int64 last_log_term = 4;
inline bool VoteRequest::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoteRequest::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoteRequest::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoteRequest::clear_last_log_term() {
  last_log_term_ = GOOGLE_LONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::int64 VoteRequest::last_log_term() const {
  return last_log_term_;
}
inline void VoteRequest::set_last_log_term(::google::protobuf::int64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
}

// -------------------------------------------------------------------

// VoteResponse

// optional int64 term = 1;
inline bool VoteResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoteResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoteResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoteResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 VoteResponse::term() const {
  return term_;
}
inline void VoteResponse::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// optional bool vote_granted = 2;
inline bool VoteResponse::has_vote_granted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoteResponse::set_has_vote_granted() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoteResponse::clear_has_vote_granted() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoteResponse::clear_vote_granted() {
  vote_granted_ = false;
  clear_has_vote_granted();
}
inline bool VoteResponse::vote_granted() const {
  return vote_granted_;
}
inline void VoteResponse::set_vote_granted(bool value) {
  set_has_vote_granted();
  vote_granted_ = value;
}

// -------------------------------------------------------------------

// LogEntry

// optional int64 term = 1;
inline bool LogEntry::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogEntry::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogEntry::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogEntry::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 LogEntry::term() const {
  return term_;
}
inline void LogEntry::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// optional int64 index = 2;
inline bool LogEntry::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogEntry::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogEntry::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogEntry::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::int64 LogEntry::index() const {
  return index_;
}
inline void LogEntry::set_index(::google::protobuf::int64 value) {
  set_has_index();
  index_ = value;
}

// optional bytes data = 3;
inline bool LogEntry::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogEntry::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogEntry::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogEntry::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& LogEntry::data() const {
  return *data_;
}
inline void LogEntry::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void LogEntry::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void LogEntry::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogEntry::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* LogEntry::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogEntry::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// optional int64 term = 1;
inline bool AppendEntriesRequest::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntriesRequest::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntriesRequest::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntriesRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 AppendEntriesRequest::term() const {
  return term_;
}
inline void AppendEntriesRequest::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// optional string leader_id = 2;
inline bool AppendEntriesRequest::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntriesRequest::set_has_leader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntriesRequest::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntriesRequest::clear_leader_id() {
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    leader_id_->clear();
  }
  clear_has_leader_id();
}
inline const ::std::string& AppendEntriesRequest::leader_id() const {
  return *leader_id_;
}
inline void AppendEntriesRequest::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void AppendEntriesRequest::set_leader_id(const char* value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void AppendEntriesRequest::set_leader_id(const char* value, size_t size) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppendEntriesRequest::mutable_leader_id() {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  return leader_id_;
}
inline ::std::string* AppendEntriesRequest::release_leader_id() {
  clear_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_id_;
    leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppendEntriesRequest::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_id_;
  }
  if (leader_id) {
    set_has_leader_id();
    leader_id_ = leader_id;
  } else {
    clear_has_leader_id();
    leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 prev_log_index = 3;
inline bool AppendEntriesRequest::has_prev_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppendEntriesRequest::set_has_prev_log_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppendEntriesRequest::clear_has_prev_log_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppendEntriesRequest::clear_prev_log_index() {
  prev_log_index_ = GOOGLE_LONGLONG(0);
  clear_has_prev_log_index();
}
inline ::google::protobuf::int64 AppendEntriesRequest::prev_log_index() const {
  return prev_log_index_;
}
inline void AppendEntriesRequest::set_prev_log_index(::google::protobuf::int64 value) {
  set_has_prev_log_index();
  prev_log_index_ = value;
}

// optional int64 prev_log_term = 4;
inline bool AppendEntriesRequest::has_prev_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendEntriesRequest::set_has_prev_log_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppendEntriesRequest::clear_has_prev_log_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppendEntriesRequest::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_LONGLONG(0);
  clear_has_prev_log_term();
}
inline ::google::protobuf::int64 AppendEntriesRequest::prev_log_term() const {
  return prev_log_term_;
}
inline void AppendEntriesRequest::set_prev_log_term(::google::protobuf::int64 value) {
  set_has_prev_log_term();
  prev_log_term_ = value;
}

// repeated .anraft.LogEntry entries = 5;
inline int AppendEntriesRequest::entries_size() const {
  return entries_.size();
}
inline void AppendEntriesRequest::clear_entries() {
  entries_.Clear();
}
inline const ::anraft::LogEntry& AppendEntriesRequest::entries(int index) const {
  return entries_.Get(index);
}
inline ::anraft::LogEntry* AppendEntriesRequest::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline ::anraft::LogEntry* AppendEntriesRequest::add_entries() {
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::anraft::LogEntry >&
AppendEntriesRequest::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::anraft::LogEntry >*
AppendEntriesRequest::mutable_entries() {
  return &entries_;
}

// optional int64 leader_commit = 6;
inline bool AppendEntriesRequest::has_leader_commit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppendEntriesRequest::set_has_leader_commit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppendEntriesRequest::clear_has_leader_commit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppendEntriesRequest::clear_leader_commit() {
  leader_commit_ = GOOGLE_LONGLONG(0);
  clear_has_leader_commit();
}
inline ::google::protobuf::int64 AppendEntriesRequest::leader_commit() const {
  return leader_commit_;
}
inline void AppendEntriesRequest::set_leader_commit(::google::protobuf::int64 value) {
  set_has_leader_commit();
  leader_commit_ = value;
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// optional int64 term = 1;
inline bool AppendEntriesResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntriesResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntriesResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntriesResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 AppendEntriesResponse::term() const {
  return term_;
}
inline void AppendEntriesResponse::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// optional bool success = 2;
inline bool AppendEntriesResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntriesResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntriesResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntriesResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool AppendEntriesResponse::success() const {
  return success_;
}
inline void AppendEntriesResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace anraft

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_2eproto__INCLUDED
